{
  "pipes": [],
  "interfaces": [
    {
      "name": "Task",
      "id": "interface-Task-0bcca9992b80e6884b02c7f696e71df26da52ae88bbfe829297eb07d6f5042a627fc38b720b0a4d45697a313662c1b03ab525b09251b9f9ad08e2c38cec21ea5",
      "file": "src/app/models/task.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface Task {\r\n  id?: string;\r\n  title?: string;\r\n  state?: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 2
        },
        {
          "name": "state",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 4
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "TaskStateModel",
      "id": "interface-TaskStateModel-e27351c76a651d92a4a8e9bb374527c05656ac27d735462e1c9e05fa94598f9422cea815443536a711a6dd34c77dfaccbcef9a0cc9b0b9c744029cdfef0a5ffc",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\r\n\r\nimport { Task } from \"../models/task.model\";\r\nimport { patch, updateItem } from \"@ngxs/store/operators\";\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n\r\n  constructor(public payload: boolean) { }\r\n}\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  }\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  @Action(PinTask)\r\n  pinTask({ getState, setState }: StateContext<TaskStateModel>,\r\n          { payload }: PinTask) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(ArchiveTask)\r\n  archiveTask({ getState, setState }: StateContext<TaskStateModel>,\r\n              { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(AppError)\r\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
      "properties": [
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 41
        },
        {
          "name": "status",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 40
        },
        {
          "name": "tasks",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Task[]",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 39
        }
      ],
      "indexSignatures": [],
      "kind": 171,
      "methods": [],
      "extends": []
    },
    {
      "name": "User",
      "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
      "file": "src/stories/User.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface User {}\n",
      "properties": [],
      "indexSignatures": [],
      "methods": [],
      "extends": []
    }
  ],
  "injectables": [
    {
      "name": "TasksState",
      "id": "injectable-TasksState-e27351c76a651d92a4a8e9bb374527c05656ac27d735462e1c9e05fa94598f9422cea815443536a711a6dd34c77dfaccbcef9a0cc9b0b9c744029cdfef0a5ffc",
      "file": "src/app/state/task.state.ts",
      "properties": [],
      "methods": [
        {
          "name": "archiveTask",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "ArchiveTask",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "ArchiveTask"
            }
          ],
          "modifierKind": [
            170
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "ArchiveTask",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getAllTasks",
          "args": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "Task[]",
          "typeParameters": [],
          "line": 60,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [
            170,
            126
          ],
          "jsdoctags": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "getError",
          "args": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Selector",
              "stringifiedArguments": ""
            }
          ],
          "modifierKind": [
            170,
            126
          ],
          "jsdoctags": [
            {
              "name": "state",
              "type": "TaskStateModel",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pinTask",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "PinTask",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "PinTask"
            }
          ],
          "modifierKind": [
            170
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "PinTask",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setAppError",
          "args": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "type": "AppError",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 107,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "Action",
              "stringifiedArguments": "AppError"
            }
          ],
          "modifierKind": [
            170
          ],
          "jsdoctags": [
            {
              "type": "StateContext<TaskStateModel>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "type": "AppError",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\r\n\r\nimport { Task } from \"../models/task.model\";\r\nimport { patch, updateItem } from \"@ngxs/store/operators\";\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n\r\n  constructor(public payload: boolean) { }\r\n}\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  }\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  @Action(PinTask)\r\n  pinTask({ getState, setState }: StateContext<TaskStateModel>,\r\n          { payload }: PinTask) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(ArchiveTask)\r\n  archiveTask({ getState, setState }: StateContext<TaskStateModel>,\r\n              { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(AppError)\r\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
      "extends": [],
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "AppError",
      "id": "class-AppError-e27351c76a651d92a4a8e9bb374527c05656ac27d735462e1c9e05fa94598f9422cea815443536a711a6dd34c77dfaccbcef9a0cc9b0b9c744029cdfef0a5ffc",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\r\n\r\nimport { Task } from \"../models/task.model\";\r\nimport { patch, updateItem } from \"@ngxs/store/operators\";\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n\r\n  constructor(public payload: boolean) { }\r\n}\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  }\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  @Action(PinTask)\r\n  pinTask({ getState, setState }: StateContext<TaskStateModel>,\r\n          { payload }: PinTask) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(ArchiveTask)\r\n  archiveTask({ getState, setState }: StateContext<TaskStateModel>,\r\n              { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(AppError)\r\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 26,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "boolean",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "inputsClass": [],
      "outputsClass": [],
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 28,
          "modifierKind": [
            125
          ]
        },
        {
          "name": "type",
          "defaultValue": "actions.ERROR",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 26,
          "modifierKind": [
            126,
            148
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "ArchiveTask",
      "id": "class-ArchiveTask-e27351c76a651d92a4a8e9bb374527c05656ac27d735462e1c9e05fa94598f9422cea815443536a711a6dd34c77dfaccbcef9a0cc9b0b9c744029cdfef0a5ffc",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\r\n\r\nimport { Task } from \"../models/task.model\";\r\nimport { patch, updateItem } from \"@ngxs/store/operators\";\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n\r\n  constructor(public payload: boolean) { }\r\n}\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  }\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  @Action(PinTask)\r\n  pinTask({ getState, setState }: StateContext<TaskStateModel>,\r\n          { payload }: PinTask) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(ArchiveTask)\r\n  archiveTask({ getState, setState }: StateContext<TaskStateModel>,\r\n              { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(AppError)\r\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 14,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "inputsClass": [],
      "outputsClass": [],
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 16,
          "modifierKind": [
            125
          ]
        },
        {
          "name": "type",
          "defaultValue": "actions.ARCHIVE_TASK",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 14,
          "modifierKind": [
            126,
            148
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "hostBindings": [],
      "hostListeners": []
    },
    {
      "name": "PinTask",
      "id": "class-PinTask-e27351c76a651d92a4a8e9bb374527c05656ac27d735462e1c9e05fa94598f9422cea815443536a711a6dd34c77dfaccbcef9a0cc9b0b9c744029cdfef0a5ffc",
      "file": "src/app/state/task.state.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Action, Selector, State, StateContext } from \"@ngxs/store\";\r\n\r\nimport { Task } from \"../models/task.model\";\r\nimport { patch, updateItem } from \"@ngxs/store/operators\";\r\n\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) { }\r\n}\r\n\r\nexport class AppError {\r\n  static readonly type = actions.ERROR;\r\n\r\n  constructor(public payload: boolean) { }\r\n}\r\n\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  }\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  @Action(PinTask)\r\n  pinTask({ getState, setState }: StateContext<TaskStateModel>,\r\n          { payload }: PinTask) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(ArchiveTask)\r\n  archiveTask({ getState, setState }: StateContext<TaskStateModel>,\r\n              { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  @Action(AppError)\r\n  setAppError({ patchState, getState }: StateContext<TaskStateModel>,\r\n    { payload }: AppError) {\r\n    const state = getState();\r\n    patchState({\r\n      error: !state.error,\r\n    });\r\n  }\r\n}\r\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 20,
        "jsdoctags": [
          {
            "name": "payload",
            "type": "string",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "inputsClass": [],
      "outputsClass": [],
      "properties": [
        {
          "name": "payload",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 22,
          "modifierKind": [
            125
          ]
        },
        {
          "name": "type",
          "defaultValue": "actions.PIN_TASK",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 20,
          "modifierKind": [
            126,
            148
          ]
        }
      ],
      "methods": [],
      "indexSignatures": [],
      "extends": [],
      "hostBindings": [],
      "hostListeners": []
    }
  ],
  "directives": [],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-556de50ff391376fb7f01968032dbb780567e6cfd4de2154ebf5a9bd41ef2c8ab244c3bc21126d3056747ec28ff55329f8b0e27d072f96ce11517a8859e06fee",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": [],
      "styles": [],
      "template": "<app-inbox-screen></app-inbox-screen>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "title",
          "defaultValue": "'taskbox'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 8
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `<app-inbox-screen></app-inbox-screen>`,\n})\nexport class AppComponent {\n  title = 'taskbox';\n}\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "ButtonComponent",
      "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
      "file": "src/stories/button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-button",
      "styleUrls": [
        "./button.css"
      ],
      "styles": [],
      "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "backgroundColor",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nWhat background color to use\n",
          "description": "<p>What background color to use</p>\n",
          "line": 28,
          "type": "string",
          "decorators": []
        },
        {
          "name": "label",
          "defaultValue": "'Button'",
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "pos": 786,
              "end": 799,
              "kind": 327,
              "id": 0,
              "flags": 16842752,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "tagName": {
                "pos": 787,
                "end": 795,
                "kind": 80,
                "id": 0,
                "flags": 16842752,
                "transformFlags": 0,
                "escapedText": "required"
              },
              "comment": ""
            }
          ],
          "rawdescription": "\n\nButton contents\n\n",
          "description": "<p>Button contents</p>\n",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "primary",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nIs this the principal call to action on the page?\n",
          "description": "<p>Is this the principal call to action on the page?</p>\n",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "defaultValue": "'medium'",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nHow large should the button be?\n",
          "description": "<p>How large should the button be?</p>\n",
          "line": 34,
          "type": "\"small\" | \"medium\" | \"large\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onClick",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nOptional click handler\n",
          "description": "<p>Optional click handler</p>\n",
          "line": 48,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [
        {
          "name": "CommonModule",
          "type": "module"
        }
      ],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
          "styleUrl": "./button.css"
        }
      ],
      "stylesData": "",
      "extends": [],
      "accessors": {
        "classes": {
          "name": "classes",
          "getSignature": {
            "name": "classes",
            "type": "[]",
            "returnType": "string[]",
            "line": 50
          }
        }
      }
    },
    {
      "name": "HeaderComponent",
      "id": "component-HeaderComponent-a71f246366d5d3dd2485d220bc2c384ceb3f056eb50faded8ff9e4a6404ca4a28c23117da4b98825de8da482bc2ba3b9abeab416745b32d1a89f68595d2dc939",
      "file": "src/stories/header.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-header",
      "styleUrls": [
        "./header.css"
      ],
      "styles": [],
      "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "User | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onCreateAccount",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "EventEmitter"
        },
        {
          "name": "onLogin",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "EventEmitter"
        },
        {
          "name": "onLogout",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
          "styleUrl": "./header.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "InboxScreenComponent",
      "id": "component-InboxScreenComponent-851e474fac7f4d09f94be4ab4d917c0aee26d42634af9be7c27ae659d5d2cac24ec6f3bb3223b358e98b6d85e3c5752146fa17fb9e5bc5a47fc741ff9c66e8f3",
      "file": "src/app/components/inbox-screen.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-inbox-screen",
      "styleUrls": [],
      "styles": [],
      "template": "<app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "error$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<boolean>",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 12
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from \"@angular/core\";\r\nimport { Store } from \"@ngxs/store\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: 'app-inbox-screen',\r\n  template: `\r\n    <app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>\r\n  `,\r\n})\r\nexport default class InboxScreenComponent {\r\n  error$: Observable<boolean>;\r\n\r\n  constructor(private store: Store) {\r\n    this.error$ = store.select((state) => state.taskbox.error);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 12,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    },
    {
      "name": "PageComponent",
      "id": "component-PageComponent-f5d2fd9ba0ee70c24f514ef21ebdae50beb2e2f42594802a96cdbeb02a59371897162b6be17fcb45cdc0d237d3e4bee611d1ad1d446a54e0699ba35b48991b87",
      "file": "src/stories/page.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "storybook-page",
      "styleUrls": [
        "./page.css"
      ],
      "styles": [],
      "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "user",
          "defaultValue": "null",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "User | null",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 64
        }
      ],
      "methodsClass": [
        {
          "name": "doCreateAccount",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogin",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "doLogout",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": ""
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
          "styleUrl": "./page.css"
        }
      ],
      "stylesData": "",
      "extends": []
    },
    {
      "name": "PureInboxScreenComponent",
      "id": "component-PureInboxScreenComponent-cddfb117e7406b860dea3d720a255e3d761b121c5e27d207118474c8a2e89fdae06e95fef3b7df46d2ddcff3b19d8b64dad30f6cf59bb2148f6fc8e235c18e2f",
      "file": "src/app/components/pure-inbox-screen.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-pure-inbox-screen",
      "styleUrls": [],
      "styles": [],
      "template": "<div *ngIf=\"error\" class=\"page lists-show\">\n  <div class=\"wrapper-message\">\n    <span class=\"icon-face-sad\"></span>\n    <p class=\"title-message\">Oh no!</p>\n    <p class=\"subtitle-message\">Something went wrong</p>\n  </div>\n</div>\n<div *ngIf=\"!error\" class=\"page lists-show\">\n  <nav>\n    <h1 class=\"title-page\">Taskbox</h1>\n  </nav>\n  <app-task-list></app-task-list>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "error",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "any",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pure-inbox-screen',\r\n  template: `\r\n    <div *ngIf=\"error\" class=\"page lists-show\">\r\n      <div class=\"wrapper-message\">\r\n        <span class=\"icon-face-sad\"></span>\r\n        <p class=\"title-message\">Oh no!</p>\r\n        <p class=\"subtitle-message\">Something went wrong</p>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"!error\" class=\"page lists-show\">\r\n      <nav>\r\n        <h1 class=\"title-page\">Taskbox</h1>\r\n      </nav>\r\n      <app-task-list></app-task-list>\r\n    </div>\r\n  `,\r\n})\r\nexport default class PureInboxScreenComponent {\r\n  @Input()\r\n  error: any;\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "PureTaskListComponent",
      "id": "component-PureTaskListComponent-6b8b4614574e2b2dfc5c7dbac389e857c87b986fa4763c4688cea9b9f570103b68387912701ba400bf4b13d80c3b530e88827dce6650f904f05167a35ce1b425",
      "file": "src/app/components/pure-task-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-pure-task-list",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"list-items\">\n  <app-task\n    *ngFor=\"let task of tasksInOrder\"\n    [task]=\"task\"\n    (onArchiveTask)=\"onArchiveTask.emit($event)\"\n    (onPinTask)=\"onPinTask.emit($event)\">\n  </app-task>\n\n  <div\n    *ngIf=\"tasksInOrder.length === 0 && !loading\"\n    class=\"wrapper-message\">\n    <span class=\"icon-check\"></span>\n    <p class=\"title-message\">You have no tasks</p>\n    <p class=\"subtitle-message\">Sit back and relax</p>\n  </div>\n\n  <div *ngIf=\"loading\">\n    <div\n      *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\"\n      class=\"loading-item\">\n      <span class=\"glow-checkbox\"></span>\n      <span class=\"glow-text\">\n        <span>Loading</span><span>cool</span><span>state</span>\n      </span>\n    </div>\n  </div>\n</div>",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "loading",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "tasks",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "Task[]",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onArchiveTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "EventEmitter"
        },
        {
          "name": "onPinTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Task } from '../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-pure-task-list',\r\n  template: `\r\n  <div class=\"list-items\">\r\n    <app-task\r\n      *ngFor=\"let task of tasksInOrder\"\r\n      [task]=\"task\"\r\n      (onArchiveTask)=\"onArchiveTask.emit($event)\"\r\n      (onPinTask)=\"onPinTask.emit($event)\">\r\n    </app-task>\r\n\r\n    <div\r\n      *ngIf=\"tasksInOrder.length === 0 && !loading\"\r\n      class=\"wrapper-message\">\r\n      <span class=\"icon-check\"></span>\r\n      <p class=\"title-message\">You have no tasks</p>\r\n      <p class=\"subtitle-message\">Sit back and relax</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"loading\">\r\n      <div\r\n        *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\"\r\n        class=\"loading-item\">\r\n        <span class=\"glow-checkbox\"></span>\r\n        <span class=\"glow-text\">\r\n          <span>Loading</span><span>cool</span><span>state</span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>`\r\n})\r\nexport default class PureTaskListComponent {\r\n\r\n  /**\r\n   * @ignore\r\n   * Component property to defin ordering of tasks\r\n   */\r\n  tasksInOrder: Task[] = [];\r\n\r\n  @Input()\r\n  loading = false;\r\n\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  @Input()\r\n  set tasks(arr: Task[]) {\r\n    const initialTasks = [\r\n      ...arr.filter(t => t.state === 'TASK_PINNED'),\r\n      ...arr.filter(t => t.state !== 'TASK_PINNED'),\r\n    ];\r\n    const filteredTasks = initialTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n    this.tasksInOrder = filteredTasks.filter(\r\n      t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\r\n    );\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": [],
      "accessors": {
        "tasks": {
          "name": "tasks",
          "setSignature": {
            "name": "tasks",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "arr",
                "type": "Task[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "arr",
                "type": "Task[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "TaskComponent",
      "id": "component-TaskComponent-dc798a84e6d35f2c45a177c58ef187bf90a75046df9d0141b2c0ba0745efd694333c3630648624b90690814ab13ccc8a4d2223b926ab31e98f36bb62b2d323ac",
      "file": "src/app/components/task.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-task",
      "styleUrls": [],
      "styles": [],
      "template": "<div class=\"list-item {{ task?.state }}\">\n  <label\n    [attr.aria-label]=\"'archiveTask-' + task?.id\"\n    for=\"checked-{{ task?.id }}\"\n    class=\"checkbox\">\n    <input\n      type=\"checkbox\"\n      disabled=\"true\"\n      [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\n      name=\"checked-{{ task?.id }}\"\n      id=\"checked-{{ task?.id }}\" />\n    <span class=\"checkbox-custom\"\n          (click)=\"onArchive(task?.id)\"></span>\n  </label>\n  <label\n    [attr.aria-label]=\"task?.title + ''\"\n    for=\"title-{{ task?.id }}\"\n    class=\"title\">\n    <input\n      type=\"text\"\n      [value]=\"task?.title\"\n      readonly=\"true\"\n      id=\"title-{{ task?.id }}\"\n      name=\"title-{{ task?.id }}\"\n      placeholder=\"Input title\"\n      style=\"background-color: red;\" />\n  </label>\n  <button\n    *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n    class=\"pin-button\"\n    [attr.aria-label]=\"'pinTask-' + task?.id\"\n    (click)=\"onPin(task?.id)\">\n    <span class=\"icon-star\"></span>\n  </button>\n</div>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [
        {
          "name": "task",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Task",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "onArchiveTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "EventEmitter"
        },
        {
          "name": "onPinTask",
          "defaultValue": "new EventEmitter<Event>()",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onArchive",
          "args": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "onPin",
          "args": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\r\nimport { Task } from '../models/task.model';\r\n\r\n@Component({\r\n  selector: 'app-task',\r\n  template: `\r\n  <div class=\"list-item {{ task?.state }}\">\r\n    <label\r\n      [attr.aria-label]=\"'archiveTask-' + task?.id\"\r\n      for=\"checked-{{ task?.id }}\"\r\n      class=\"checkbox\">\r\n      <input\r\n        type=\"checkbox\"\r\n        disabled=\"true\"\r\n        [defaultChecked]=\"task?.state === 'TASK_ARCHIVED'\"\r\n        name=\"checked-{{ task?.id }}\"\r\n        id=\"checked-{{ task?.id }}\" />\r\n      <span class=\"checkbox-custom\"\r\n            (click)=\"onArchive(task?.id)\"></span>\r\n    </label>\r\n    <label\r\n      [attr.aria-label]=\"task?.title + ''\"\r\n      for=\"title-{{ task?.id }}\"\r\n      class=\"title\">\r\n      <input\r\n        type=\"text\"\r\n        [value]=\"task?.title\"\r\n        readonly=\"true\"\r\n        id=\"title-{{ task?.id }}\"\r\n        name=\"title-{{ task?.id }}\"\r\n        placeholder=\"Input title\"\r\n        style=\"background-color: red;\" />\r\n    </label>\r\n    <button\r\n      *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\r\n      class=\"pin-button\"\r\n      [attr.aria-label]=\"'pinTask-' + task?.id\"\r\n      (click)=\"onPin(task?.id)\">\r\n      <span class=\"icon-star\"></span>\r\n    </button>\r\n  </div>\r\n  `,\r\n})\r\nexport default class TaskComponent {\r\n  @Input()\r\n  task?: Task;\r\n\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n\r\n  onPin(id: any) {\r\n    this.onPinTask.emit(id);\r\n  }\r\n\r\n  onArchive(id: any) {\r\n    this.onArchiveTask.emit(id);\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "extends": []
    },
    {
      "name": "TaskListComponent",
      "id": "component-TaskListComponent-858fc7348d2b2565b2c0108743c65079085824b8c623e995bea9102607e2744a4afc575f54463a1ca27ab763e86279defd6e6aa35dcc8ec00e6a34e2ffe70c0c",
      "file": "src/app/components/task-list.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-task-list",
      "styleUrls": [],
      "styles": [],
      "template": "<app-pure-task-list\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-pure-task-list>\n",
      "templateUrl": [],
      "viewProviders": [],
      "hostDirectives": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "tasks$",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Observable<any>",
          "indexKey": "",
          "optional": true,
          "description": "",
          "line": 17
        }
      ],
      "methodsClass": [
        {
          "name": "archiveTask",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 23,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "pinTask",
          "args": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 27,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "id",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "standalone": false,
      "imports": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { ArchiveTask, PinTask } from '../state/task.state';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  template: `\r\n  <app-pure-task-list\r\n    [tasks]=\"tasks$ | async\"\r\n    (onArchiveTask)=\"archiveTask($event)\"\r\n    (onPinTask)=\"pinTask($event)\"\r\n  ></app-pure-task-list>\r\n  `,\r\n})\r\nexport default class TaskListComponent {\r\n  tasks$?: Observable<any>;\r\n\r\n  constructor(private store: Store) {\r\n    this.tasks$ = store.select((state) => state.taskbox.tasks);\r\n  }\r\n\r\n  archiveTask(id: string) {\r\n    this.store.dispatch(new ArchiveTask(id));\r\n  }\r\n\r\n  pinTask(id: string) {\r\n    this.store.dispatch(new PinTask(id));\r\n  }\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": "",
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 17,
        "jsdoctags": [
          {
            "name": "store",
            "type": "Store",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      },
      "extends": []
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-f3de7a3332ec7409516e26bd266b13fcc96ba867fbf71b9f98944ef79062ba765200c46158d29691ab77d2a848eb6d859626cc6219662a1182b181dcdb39a2e9",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { TaskModule } from './components/task.module';\nimport { NgxsModule } from '@ngxs/store';\nimport { environment } from 'src/environments/environment.prod';\nimport { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\nimport InboxScreenComponent from './components/inbox-screen.component';\nimport PureInboxScreenComponent from './components/pure-inbox-screen.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InboxScreenComponent,\n    PureInboxScreenComponent\n  ],\n  imports: [\n    BrowserModule,\n    TaskModule,\n    NgxsModule.forRoot([], {\n      developmentMode: !environment.production,\n    }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n    NgxsLoggerPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            },
            {
              "name": "InboxScreenComponent"
            },
            {
              "name": "PureInboxScreenComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "TaskModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TaskModule",
      "id": "module-TaskModule-176a65ac4acb30baea31c9a435e5d3e6335e8d9e811bec7ddb5a472e973b268556d1302760ec5305aada3a2e9b5ce187eec79484ea42d98450d4eafce81fa9a5",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/components/task.module.ts",
      "methods": [],
      "sourceCode": "import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { NgxsModule } from \"@ngxs/store\";\r\n\r\nimport { TasksState } from \"../state/task.state\";\r\n\r\nimport TaskComponent from \"./task.component\";\r\nimport TaskListComponent from \"./task-list.component\";\r\nimport PureTaskListComponent from \"./pure-task-list.component\";\r\nimport PureInboxScreenComponent from './pure-inbox-screen.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    NgxsModule.forFeature([TasksState]),\r\n  ],\r\n  exports: [\r\n    TaskComponent,\r\n    TaskListComponent\r\n  ],\r\n  declarations: [\r\n    TaskComponent,\r\n    TaskListComponent,\r\n    PureTaskListComponent\r\n  ],\r\n  providers: [],\r\n})\r\nexport class TaskModule { }\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "PureTaskListComponent"
            },
            {
              "name": "TaskComponent"
            },
            {
              "name": "TaskListComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TaskComponent"
            },
            {
              "name": "TaskListComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "actions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/task.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n}"
      },
      {
        "name": "defaultTasks",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/state/task.state.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true,\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false,\n}"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/app/state/task.state.ts": [
        {
          "name": "actions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/task.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n}"
        },
        {
          "name": "defaultTasks",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/state/task.state.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true,\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false,\n}"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 4,
    "status": "low",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/components/inbox-screen.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "InboxScreenComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/components/pure-inbox-screen.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PureInboxScreenComponent",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/components/pure-task-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PureTaskListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/components/task-list.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TaskListComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/components/task.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TaskComponent",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/models/task.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Task",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "AppError",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "ArchiveTask",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "class",
        "linktype": "classe",
        "name": "PinTask",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "TasksState",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "TaskStateModel",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "actions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/state/task.state.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "defaultTasks",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/User.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "User",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "ButtonComponent",
        "coveragePercent": 83,
        "coverageCount": "5/6",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/header.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "HeaderComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/stories/page.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "PageComponent",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      }
    ]
  }
}
